{
  "api/Bonsai.Gui.ButtonBuilder.html": {
    "href": "api/Bonsai.Gui.ButtonBuilder.html",
    "title": "Class ButtonBuilder | Bonsai.Gui",
    "keywords": "Class ButtonBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a button control and generates a sequence of notifications whenever the button is clicked. [TypeVisualizer(typeof(ButtonVisualizer))] public class ButtonBuilder : ButtonBuilderBase<string>, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase TextControlBuilderBase<string> ButtonBuilderBase<string> ButtonBuilder Implements IExpressionBuilder INamedElement Inherited Members TextControlBuilderBase<string>.Build(IEnumerable<Expression>) TextControlBuilderBase.Text ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Generate() Generates an observable sequence of event notifications from the UI control. protected override IObservable<string> Generate() Returns IObservable<string> An observable sequence of events of type string."
  },
  "api/Bonsai.Gui.ButtonBuilderBase-1.html": {
    "href": "api/Bonsai.Gui.ButtonBuilderBase-1.html",
    "title": "Class ButtonBuilderBase<TEvent> | Bonsai.Gui",
    "keywords": "Class ButtonBuilderBase<TEvent> Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class with common button control functionality. public abstract class ButtonBuilderBase<TEvent> : TextControlBuilderBase<TEvent>, IExpressionBuilder, INamedElement Type Parameters TEvent Provides an abstract base class with common button control functionality. Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase TextControlBuilderBase<TEvent> ButtonBuilderBase<TEvent> Implements IExpressionBuilder INamedElement Derived ButtonBuilder CheckButtonBuilderBase Inherited Members TextControlBuilderBase<TEvent>.Build(IEnumerable<Expression>) TextControlBuilderBase<TEvent>.Generate() TextControlBuilderBase.Text ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.ButtonVisualizer.html": {
    "href": "api/Bonsai.Gui.ButtonVisualizer.html",
    "title": "Class ButtonVisualizer | Bonsai.Gui",
    "keywords": "Class ButtonVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a button control. public class ButtonVisualizer : ControlVisualizerBase<Button, ButtonBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<Button, ButtonBuilder> ButtonVisualizer Inherited Members ControlVisualizerBase<Button, ButtonBuilder>.Control ControlVisualizerBase<Button, ButtonBuilder>.CreateControl(IServiceProvider, ButtonBuilder) ControlVisualizerBase<Button, ButtonBuilder>.Load(IServiceProvider) ControlVisualizerBase<Button, ButtonBuilder>.Show(object) ControlVisualizerBase<Button, ButtonBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, ButtonBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override Button CreateControl(IServiceProvider provider, ButtonBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder ButtonBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns Button A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.CheckBoxBuilder.html": {
    "href": "api/Bonsai.Gui.CheckBoxBuilder.html",
    "title": "Class CheckBoxBuilder | Bonsai.Gui",
    "keywords": "Class CheckBoxBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a check box control and generates a sequence of notifications whenever the checked status changes. [TypeVisualizer(typeof(CheckBoxVisualizer))] public class CheckBoxBuilder : CheckButtonBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase TextControlBuilderBase<bool> ButtonBuilderBase<bool> CheckButtonBuilderBase CheckBoxBuilder Implements IExpressionBuilder INamedElement Inherited Members CheckButtonBuilderBase.Checked CheckButtonBuilderBase.Generate() TextControlBuilderBase<bool>.Build(IEnumerable<Expression>) TextControlBuilderBase.Text ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.CheckBoxVisualizer.html": {
    "href": "api/Bonsai.Gui.CheckBoxVisualizer.html",
    "title": "Class CheckBoxVisualizer | Bonsai.Gui",
    "keywords": "Class CheckBoxVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a check box control. public class CheckBoxVisualizer : ControlVisualizerBase<CheckBox, CheckBoxBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<CheckBox, CheckBoxBuilder> CheckBoxVisualizer Inherited Members ControlVisualizerBase<CheckBox, CheckBoxBuilder>.Control ControlVisualizerBase<CheckBox, CheckBoxBuilder>.CreateControl(IServiceProvider, CheckBoxBuilder) ControlVisualizerBase<CheckBox, CheckBoxBuilder>.Load(IServiceProvider) ControlVisualizerBase<CheckBox, CheckBoxBuilder>.Show(object) ControlVisualizerBase<CheckBox, CheckBoxBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, CheckBoxBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override CheckBox CreateControl(IServiceProvider provider, CheckBoxBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder CheckBoxBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns CheckBox A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.CheckButtonBuilderBase.html": {
    "href": "api/Bonsai.Gui.CheckButtonBuilderBase.html",
    "title": "Class CheckButtonBuilderBase | Bonsai.Gui",
    "keywords": "Class CheckButtonBuilderBase Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class with common check button control functionality. public abstract class CheckButtonBuilderBase : ButtonBuilderBase<bool>, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase TextControlBuilderBase<bool> ButtonBuilderBase<bool> CheckButtonBuilderBase Implements IExpressionBuilder INamedElement Derived CheckBoxBuilder RadioButtonBuilder ToggleButtonBuilder Inherited Members TextControlBuilderBase<bool>.Build(IEnumerable<Expression>) TextControlBuilderBase.Text ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Checked Gets or sets a value indicating whether the button is checked. public bool Checked { get; set; } Property Value bool Methods Generate() Generates an observable sequence of event notifications from the UI control. protected override IObservable<bool> Generate() Returns IObservable<bool> An observable sequence of events of type bool."
  },
  "api/Bonsai.Gui.ComboBoxBuilder.html": {
    "href": "api/Bonsai.Gui.ComboBoxBuilder.html",
    "title": "Class ComboBoxBuilder | Bonsai.Gui",
    "keywords": "Class ComboBoxBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a combo box control and generates a sequence of notifications whenever the selection changes. [TypeVisualizer(typeof(ComboBoxVisualizer))] public class ComboBoxBuilder : ListControlBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase ControlBuilderBase<string> ListControlBuilderBase ComboBoxBuilder Implements IExpressionBuilder INamedElement Inherited Members ListControlBuilderBase.Items ListControlBuilderBase.SelectedItem ListControlBuilderBase.Generate() ControlBuilderBase<string>.Build(IEnumerable<Expression>) ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.ComboBoxDataSourceBuilder.html": {
    "href": "api/Bonsai.Gui.ComboBoxDataSourceBuilder.html",
    "title": "Class ComboBoxDataSourceBuilder | Bonsai.Gui",
    "keywords": "Class ComboBoxDataSourceBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a combo box control bound to each data source in the sequence and generates notifications whenever the selection changes. [TypeVisualizer(typeof(ComboBoxDataSourceVisualizer))] public class ComboBoxDataSourceBuilder : ListControlDataSourceBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase DataSourceControlBuilderBase ListControlDataSourceBuilderBase ComboBoxDataSourceBuilder Implements IExpressionBuilder INamedElement Inherited Members ListControlDataSourceBuilderBase.DisplayMember ListControlDataSourceBuilderBase.Generate<TValue>(IObservable<IList<TValue>>) DataSourceControlBuilderBase.ArgumentRange DataSourceControlBuilderBase.Build(IEnumerable<Expression>) ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.ComboBoxDataSourceVisualizer.html": {
    "href": "api/Bonsai.Gui.ComboBoxDataSourceVisualizer.html",
    "title": "Class ComboBoxDataSourceVisualizer | Bonsai.Gui",
    "keywords": "Class ComboBoxDataSourceVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a combo box control bound to an arbitrary data source. public class ComboBoxDataSourceVisualizer : ControlVisualizerBase<ComboBox, ComboBoxDataSourceBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<ComboBox, ComboBoxDataSourceBuilder> ComboBoxDataSourceVisualizer Inherited Members ControlVisualizerBase<ComboBox, ComboBoxDataSourceBuilder>.Control ControlVisualizerBase<ComboBox, ComboBoxDataSourceBuilder>.CreateControl(IServiceProvider, ComboBoxDataSourceBuilder) ControlVisualizerBase<ComboBox, ComboBoxDataSourceBuilder>.Load(IServiceProvider) ControlVisualizerBase<ComboBox, ComboBoxDataSourceBuilder>.Show(object) ControlVisualizerBase<ComboBox, ComboBoxDataSourceBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, ComboBoxDataSourceBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override ComboBox CreateControl(IServiceProvider provider, ComboBoxDataSourceBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder ComboBoxDataSourceBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns ComboBox A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.ComboBoxVisualizer.html": {
    "href": "api/Bonsai.Gui.ComboBoxVisualizer.html",
    "title": "Class ComboBoxVisualizer | Bonsai.Gui",
    "keywords": "Class ComboBoxVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a combo box control. public class ComboBoxVisualizer : ControlVisualizerBase<ComboBox, ComboBoxBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<ComboBox, ComboBoxBuilder> ComboBoxVisualizer Inherited Members ControlVisualizerBase<ComboBox, ComboBoxBuilder>.Control ControlVisualizerBase<ComboBox, ComboBoxBuilder>.CreateControl(IServiceProvider, ComboBoxBuilder) ControlVisualizerBase<ComboBox, ComboBoxBuilder>.Load(IServiceProvider) ControlVisualizerBase<ComboBox, ComboBoxBuilder>.Show(object) ControlVisualizerBase<ComboBox, ComboBoxBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, ComboBoxBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override ComboBox CreateControl(IServiceProvider provider, ComboBoxBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder ComboBoxBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns ComboBox A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.ContainerControlVisualizerBase-2.html": {
    "href": "api/Bonsai.Gui.ContainerControlVisualizerBase-2.html",
    "title": "Class ContainerControlVisualizerBase<TControl, TControlBuilder> | Bonsai.Gui",
    "keywords": "Class ContainerControlVisualizerBase<TControl, TControlBuilder> Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class for visualizers representing UI elements which can contain other nested UI elements. public abstract class ContainerControlVisualizerBase<TControl, TControlBuilder> : MashupControlVisualizerBase<TControl, TControlBuilder> where TControl : Control where TControlBuilder : ExpressionBuilder Type Parameters TControl The type of the container control exposed by this type visualizer. TControlBuilder The type of the workflow element used to create the container control. Inheritance object DialogTypeVisualizer MashupVisualizer MashupControlVisualizerBase<TControl, TControlBuilder> ContainerControlVisualizerBase<TControl, TControlBuilder> Derived GroupBoxVisualizer TabControlVisualizer TableLayoutPanelVisualizer Inherited Members MashupControlVisualizerBase<TControl, TControlBuilder>.Control MashupControlVisualizerBase<TControl, TControlBuilder>.CreateControl(IServiceProvider, TControlBuilder) MashupControlVisualizerBase<TControl, TControlBuilder>.Load(IServiceProvider) MashupControlVisualizerBase<TControl, TControlBuilder>.LoadMashups(IServiceProvider) MashupControlVisualizerBase<TControl, TControlBuilder>.LoadMashupSource(int, MashupSource, IServiceProvider) MashupControlVisualizerBase<TControl, TControlBuilder>.Show(object) MashupControlVisualizerBase<TControl, TControlBuilder>.Visualize(IObservable<IObservable<object>>, IServiceProvider) MashupControlVisualizerBase<TControl, TControlBuilder>.Unload() MashupVisualizer.Load(IServiceProvider) MashupVisualizer.Unload() MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.MashupSources DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddControl(int, Control) Adds a control to the container at the specified index. protected abstract void AddControl(int index, Control control) Parameters index int The index of the control, following the order of visualizer sources. control Control The control to add to the container. GetMashupSource(int, int) Finds the mashup source located at the specified coordinates. public override MashupSource GetMashupSource(int x, int y) Parameters x int The x-coordinate used to search, in absolute screen coordinates. y int The y-coordinate used to search, in absolute screen coordinates. Returns MashupSource The MashupSource representing the mashup source located at the specified coordinates, or null if there is no source at the specified point. LoadMashupSource(int, MashupSource, IServiceProvider) Loads type visualizer resources for an individual mashup source in the mashup visualizer. protected override void LoadMashupSource(int index, MashupSource mashupSource, IServiceProvider provider) Parameters index int The zero-based index of the mashup source. mashupSource MashupSource The mashup source for which to load visualizer resources. provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. UnloadMashups() Unloads resources for all sources combined in the mashup visualizer. public override void UnloadMashups()"
  },
  "api/Bonsai.Gui.ControlBuilderBase-1.html": {
    "href": "api/Bonsai.Gui.ControlBuilderBase-1.html",
    "title": "Class ControlBuilderBase<TEvent> | Bonsai.Gui",
    "keywords": "Class ControlBuilderBase<TEvent> Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class with common UI event source control functionality. public abstract class ControlBuilderBase<TEvent> : ControlBuilderBase, IExpressionBuilder, INamedElement Type Parameters TEvent The type of event notifications emitted by the UI control. Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase ControlBuilderBase<TEvent> Implements IExpressionBuilder INamedElement Derived ControlBuilderBase<TCommand, TEvent> ListControlBuilderBase SliderBuilder Inherited Members ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the UI control. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node. Generate() Generates an observable sequence of event notifications from the UI control. protected abstract IObservable<TEvent> Generate() Returns IObservable<TEvent> An observable sequence of events of type TEvent."
  },
  "api/Bonsai.Gui.ControlBuilderBase-2.html": {
    "href": "api/Bonsai.Gui.ControlBuilderBase-2.html",
    "title": "Class ControlBuilderBase<TCommand, TEvent> | Bonsai.Gui",
    "keywords": "Class ControlBuilderBase<TCommand, TEvent> Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class with common functionality for UI controls that accept an optional sequence of command notifications. public abstract class ControlBuilderBase<TCommand, TEvent> : ControlBuilderBase<TEvent>, IExpressionBuilder, INamedElement Type Parameters TCommand The type of command notifications accepted by the UI control. TEvent The type of event notifications emitted by the UI control. Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase ControlBuilderBase<TEvent> ControlBuilderBase<TCommand, TEvent> Implements IExpressionBuilder INamedElement Inherited Members ControlBuilderBase<TEvent>.Generate() ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. public override Range<int> ArgumentRange { get; } Property Value Range<int> Methods Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the UI control. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node. Generate(IObservable<TCommand>) Generates an observable sequence of event notifications from the UI control. protected abstract IObservable<TEvent> Generate(IObservable<TCommand> source) Parameters source IObservable<TCommand> An observable sequence of commands of type TCommand. Returns IObservable<TEvent> An observable sequence of events of type TEvent."
  },
  "api/Bonsai.Gui.ControlBuilderBase.html": {
    "href": "api/Bonsai.Gui.ControlBuilderBase.html",
    "title": "Class ControlBuilderBase | Bonsai.Gui",
    "keywords": "Class ControlBuilderBase Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class for common UI control functionality. public abstract class ControlBuilderBase : ZeroArgumentExpressionBuilder, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase Implements IExpressionBuilder INamedElement Derived ControlBuilderBase<TEvent> DataSourceControlBuilderBase PropertyGridBuilder TabControlBuilder TableLayoutPanelBuilder TextControlBuilderBase Inherited Members ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Enabled Gets or sets a value specifying whether the control can respond to user interaction. public bool Enabled { get; set; } Property Value bool Font Gets or sets the font of the text displayed by the control. public Font Font { get; set; } Property Value Font Name Gets or sets the name of the control. public string Name { get; set; } Property Value string Visible Gets or sets a value specifying whether the control and all its child controls are displayed. public bool Visible { get; set; } Property Value bool Methods Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the UI control. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Bonsai.Gui.ControlExtensions.html": {
    "href": "api/Bonsai.Gui.ControlExtensions.html",
    "title": "Class ControlExtensions | Bonsai.Gui",
    "keywords": "Class ControlExtensions Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a set of static methods for subscribing delegates to observable sequences of event notifications. public static class ControlExtensions Inheritance object ControlExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods SubscribeTo<TSource>(Control, ObservableCollection<TSource>, Action<TSource[]>) Subscribes the control to change notifications in the specified observable collection. public static IDisposable SubscribeTo<TSource>(this Control control, ObservableCollection<TSource> source, Action<TSource[]> action) Parameters control Control The control on which to observe notifications. source ObservableCollection<TSource> A data collection that provides notifications when items are added, removed, or when the whole list is refreshed. action Action<TSource[]> The action to invoke on each new version of the observable collection. Returns IDisposable A disposable object used to unsubscribe from the observable sequence. Type Parameters TSource The type of the elements in the source collection. SubscribeTo<TSource>(Control, IObservable<TSource>, Action<TSource>) Subscribes the control to event notifications from the specified observable sequence. public static IDisposable SubscribeTo<TSource>(this Control control, IObservable<TSource> source, Action<TSource> action) Parameters control Control The control on which to observe notifications. source IObservable<TSource> The observable sequence of event notifications. action Action<TSource> The action to invoke on each event notification. Returns IDisposable A disposable object used to unsubscribe from the observable sequence. Type Parameters TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Gui.ControlVisualizerBase-2.html": {
    "href": "api/Bonsai.Gui.ControlVisualizerBase-2.html",
    "title": "Class ControlVisualizerBase<TControl, TControlBuilder> | Bonsai.Gui",
    "keywords": "Class ControlVisualizerBase<TControl, TControlBuilder> Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class for visualizers representing individual UI elements. public abstract class ControlVisualizerBase<TControl, TControlBuilder> : DialogTypeVisualizer where TControl : Control where TControlBuilder : ExpressionBuilder Type Parameters TControl The type of the control exposed by this type visualizer. TControlBuilder The type of the workflow element used to create the control. Inheritance object DialogTypeVisualizer ControlVisualizerBase<TControl, TControlBuilder> Derived ButtonVisualizer CheckBoxVisualizer ComboBoxDataSourceVisualizer ComboBoxVisualizer LabelVisualizer ListBoxDataSourceVisualizer ListBoxVisualizer PropertyGridVisualizer RadioButtonVisualizer SliderVisualizer TextBoxVisualizer ToggleButtonVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Control Gets the active control exposed by this type visualizer. public TControl Control { get; } Property Value TControl Methods CreateControl(IServiceProvider, TControlBuilder) Creates and configures the visual control associated with the specified workflow operator. protected abstract TControl CreateControl(IServiceProvider provider, TControlBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder TControlBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns TControl A new instance of the control class associated with the specified workflow operator. Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Gui.DataSourceControlBuilderBase.html": {
    "href": "api/Bonsai.Gui.DataSourceControlBuilderBase.html",
    "title": "Class DataSourceControlBuilderBase | Bonsai.Gui",
    "keywords": "Class DataSourceControlBuilderBase Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class for UI controls which can be bound to each data source from an observable sequence. public abstract class DataSourceControlBuilderBase : ControlBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase DataSourceControlBuilderBase Implements IExpressionBuilder INamedElement Derived ListControlDataSourceBuilderBase Inherited Members ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ArgumentRange Gets the range of input arguments that this expression builder accepts. public override Range<int> ArgumentRange { get; } Property Value Range<int> Methods Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the UI control. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node. Generate<TValue>(IObservable<IList<TValue>>) Generates an observable sequence of values containing the currently selected item from the data source whenever the selection changes. protected abstract IObservable<TValue> Generate<TValue>(IObservable<IList<TValue>> source) Parameters source IObservable<IList<TValue>> A sequence of collections representing the data sources to bind to the UI control. Only one collection is bound at any one time. Returns IObservable<TValue> A sequence of values representing the currently selected item in the UI control. Type Parameters TValue The type of the values in the data source."
  },
  "api/Bonsai.Gui.GroupBoxBuilder.html": {
    "href": "api/Bonsai.Gui.GroupBoxBuilder.html",
    "title": "Class GroupBoxBuilder | Bonsai.Gui",
    "keywords": "Class GroupBoxBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that specifies a mashup visualizer that displays a frame around a group of other visualizers with an optional caption. [TypeVisualizer(typeof(GroupBoxVisualizer))] public class GroupBoxBuilder : TextControlBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase GroupBoxBuilder Implements IExpressionBuilder INamedElement Inherited Members TextControlBuilderBase.Text ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ControlBuilderBase.Build(IEnumerable<Expression>) ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.GroupBoxVisualizer.html": {
    "href": "api/Bonsai.Gui.GroupBoxVisualizer.html",
    "title": "Class GroupBoxVisualizer | Bonsai.Gui",
    "keywords": "Class GroupBoxVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer that displays a frame around a group of other visualizers with an optional caption. public class GroupBoxVisualizer : ContainerControlVisualizerBase<GroupBox, GroupBoxBuilder> Inheritance object DialogTypeVisualizer MashupVisualizer MashupControlVisualizerBase<GroupBox, GroupBoxBuilder> ContainerControlVisualizerBase<GroupBox, GroupBoxBuilder> GroupBoxVisualizer Inherited Members ContainerControlVisualizerBase<GroupBox, GroupBoxBuilder>.AddControl(int, Control) ContainerControlVisualizerBase<GroupBox, GroupBoxBuilder>.LoadMashupSource(int, MashupSource, IServiceProvider) ContainerControlVisualizerBase<GroupBox, GroupBoxBuilder>.UnloadMashups() ContainerControlVisualizerBase<GroupBox, GroupBoxBuilder>.GetMashupSource(int, int) MashupControlVisualizerBase<GroupBox, GroupBoxBuilder>.Control MashupControlVisualizerBase<GroupBox, GroupBoxBuilder>.CreateControl(IServiceProvider, GroupBoxBuilder) MashupControlVisualizerBase<GroupBox, GroupBoxBuilder>.Load(IServiceProvider) MashupControlVisualizerBase<GroupBox, GroupBoxBuilder>.LoadMashups(IServiceProvider) MashupControlVisualizerBase<GroupBox, GroupBoxBuilder>.Show(object) MashupControlVisualizerBase<GroupBox, GroupBoxBuilder>.Visualize(IObservable<IObservable<object>>, IServiceProvider) MashupControlVisualizerBase<GroupBox, GroupBoxBuilder>.Unload() MashupVisualizer.Load(IServiceProvider) MashupVisualizer.Unload() MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddControl(int, Control) Adds a control to the container at the specified index. protected override void AddControl(int index, Control control) Parameters index int The index of the control, following the order of visualizer sources. control Control The control to add to the container. CreateControl(IServiceProvider, GroupBoxBuilder) Creates and configures the mashup control associated with the specified workflow operator. protected override GroupBox CreateControl(IServiceProvider provider, GroupBoxBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder GroupBoxBuilder The ExpressionBuilder object used to provide configuration properties to the mashup control. Returns GroupBox A new instance of the mashup control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.LabelBuilder.html": {
    "href": "api/Bonsai.Gui.LabelBuilder.html",
    "title": "Class LabelBuilder | Bonsai.Gui",
    "keywords": "Class LabelBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a label control. [TypeVisualizer(typeof(LabelVisualizer))] public class LabelBuilder : TextControlBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase LabelBuilder Implements IExpressionBuilder INamedElement Inherited Members TextControlBuilderBase.Text ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ControlBuilderBase.Build(IEnumerable<Expression>) ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.LabelVisualizer.html": {
    "href": "api/Bonsai.Gui.LabelVisualizer.html",
    "title": "Class LabelVisualizer | Bonsai.Gui",
    "keywords": "Class LabelVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a label control. public class LabelVisualizer : ControlVisualizerBase<Label, LabelBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<Label, LabelBuilder> LabelVisualizer Inherited Members ControlVisualizerBase<Label, LabelBuilder>.Control ControlVisualizerBase<Label, LabelBuilder>.CreateControl(IServiceProvider, LabelBuilder) ControlVisualizerBase<Label, LabelBuilder>.Load(IServiceProvider) ControlVisualizerBase<Label, LabelBuilder>.Show(object) ControlVisualizerBase<Label, LabelBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, LabelBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override Label CreateControl(IServiceProvider provider, LabelBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder LabelBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns Label A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.ListBoxBuilder.html": {
    "href": "api/Bonsai.Gui.ListBoxBuilder.html",
    "title": "Class ListBoxBuilder | Bonsai.Gui",
    "keywords": "Class ListBoxBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a list box control and generates a sequence of notifications whenever the selection changes. [TypeVisualizer(typeof(ListBoxVisualizer))] public class ListBoxBuilder : ListControlBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase ControlBuilderBase<string> ListControlBuilderBase ListBoxBuilder Implements IExpressionBuilder INamedElement Inherited Members ListControlBuilderBase.Items ListControlBuilderBase.SelectedItem ListControlBuilderBase.Generate() ControlBuilderBase<string>.Build(IEnumerable<Expression>) ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.ListBoxDataSourceBuilder.html": {
    "href": "api/Bonsai.Gui.ListBoxDataSourceBuilder.html",
    "title": "Class ListBoxDataSourceBuilder | Bonsai.Gui",
    "keywords": "Class ListBoxDataSourceBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a list box control bound to each data source in the sequence and generates notifications whenever the selection changes. [TypeVisualizer(typeof(ListBoxDataSourceVisualizer))] public class ListBoxDataSourceBuilder : ListControlDataSourceBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase DataSourceControlBuilderBase ListControlDataSourceBuilderBase ListBoxDataSourceBuilder Implements IExpressionBuilder INamedElement Inherited Members ListControlDataSourceBuilderBase.DisplayMember ListControlDataSourceBuilderBase.Generate<TValue>(IObservable<IList<TValue>>) DataSourceControlBuilderBase.ArgumentRange DataSourceControlBuilderBase.Build(IEnumerable<Expression>) ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.ListBoxDataSourceVisualizer.html": {
    "href": "api/Bonsai.Gui.ListBoxDataSourceVisualizer.html",
    "title": "Class ListBoxDataSourceVisualizer | Bonsai.Gui",
    "keywords": "Class ListBoxDataSourceVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a list box control bound to an arbitrary data source. public class ListBoxDataSourceVisualizer : ControlVisualizerBase<ListBox, ListBoxDataSourceBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<ListBox, ListBoxDataSourceBuilder> ListBoxDataSourceVisualizer Inherited Members ControlVisualizerBase<ListBox, ListBoxDataSourceBuilder>.Control ControlVisualizerBase<ListBox, ListBoxDataSourceBuilder>.CreateControl(IServiceProvider, ListBoxDataSourceBuilder) ControlVisualizerBase<ListBox, ListBoxDataSourceBuilder>.Load(IServiceProvider) ControlVisualizerBase<ListBox, ListBoxDataSourceBuilder>.Show(object) ControlVisualizerBase<ListBox, ListBoxDataSourceBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, ListBoxDataSourceBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override ListBox CreateControl(IServiceProvider provider, ListBoxDataSourceBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder ListBoxDataSourceBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns ListBox A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.ListBoxVisualizer.html": {
    "href": "api/Bonsai.Gui.ListBoxVisualizer.html",
    "title": "Class ListBoxVisualizer | Bonsai.Gui",
    "keywords": "Class ListBoxVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a list box control. public class ListBoxVisualizer : ControlVisualizerBase<ListBox, ListBoxBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<ListBox, ListBoxBuilder> ListBoxVisualizer Inherited Members ControlVisualizerBase<ListBox, ListBoxBuilder>.Control ControlVisualizerBase<ListBox, ListBoxBuilder>.CreateControl(IServiceProvider, ListBoxBuilder) ControlVisualizerBase<ListBox, ListBoxBuilder>.Load(IServiceProvider) ControlVisualizerBase<ListBox, ListBoxBuilder>.Show(object) ControlVisualizerBase<ListBox, ListBoxBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, ListBoxBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override ListBox CreateControl(IServiceProvider provider, ListBoxBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder ListBoxBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns ListBox A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.ListControlBuilderBase.html": {
    "href": "api/Bonsai.Gui.ListControlBuilderBase.html",
    "title": "Class ListControlBuilderBase | Bonsai.Gui",
    "keywords": "Class ListControlBuilderBase Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class for interfacing with combo box and list box controls. public abstract class ListControlBuilderBase : ControlBuilderBase<string>, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase ControlBuilderBase<string> ListControlBuilderBase Implements IExpressionBuilder INamedElement Derived ComboBoxBuilder ListBoxBuilder Inherited Members ControlBuilderBase<string>.Build(IEnumerable<Expression>) ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Items Gets the collection of items contained in the list control. public Collection<string> Items { get; } Property Value Collection<string> SelectedItem Gets or sets the currently selected item in the list control. public string SelectedItem { get; set; } Property Value string Methods Generate() Generates an observable sequence of values containing the currently selected item in the list control whenever the selection changes. protected override IObservable<string> Generate() Returns IObservable<string> A sequence of string values representing the currently selected item in the list control."
  },
  "api/Bonsai.Gui.ListControlDataSourceBuilderBase.html": {
    "href": "api/Bonsai.Gui.ListControlDataSourceBuilderBase.html",
    "title": "Class ListControlDataSourceBuilderBase | Bonsai.Gui",
    "keywords": "Class ListControlDataSourceBuilderBase Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class for interfacing with combo box and list box controls bound to each data source in an observable sequence. public abstract class ListControlDataSourceBuilderBase : DataSourceControlBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase DataSourceControlBuilderBase ListControlDataSourceBuilderBase Implements IExpressionBuilder INamedElement Derived ComboBoxDataSourceBuilder ListBoxDataSourceBuilder Inherited Members DataSourceControlBuilderBase.ArgumentRange DataSourceControlBuilderBase.Build(IEnumerable<Expression>) ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties DisplayMember Gets or sets the property to display for this list control. public string DisplayMember { get; set; } Property Value string Methods Generate<TValue>(IObservable<IList<TValue>>) Generates an observable sequence of values containing the currently selected item in the list control whenever the selection changes. protected override IObservable<TValue> Generate<TValue>(IObservable<IList<TValue>> source) Parameters source IObservable<IList<TValue>> A sequence of collections representing the data sources to bind to the list control. Only one collection is bound at any one time. Returns IObservable<TValue> A sequence of values representing the currently selected item in the list control. Type Parameters TValue The type of the values in the data source."
  },
  "api/Bonsai.Gui.MashupControlVisualizerBase-2.html": {
    "href": "api/Bonsai.Gui.MashupControlVisualizerBase-2.html",
    "title": "Class MashupControlVisualizerBase<TControl, TControlBuilder> | Bonsai.Gui",
    "keywords": "Class MashupControlVisualizerBase<TControl, TControlBuilder> Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class for visualizers representing UI elements which can be combined with other visualizers. public abstract class MashupControlVisualizerBase<TControl, TControlBuilder> : MashupVisualizer where TControl : Control where TControlBuilder : ExpressionBuilder Type Parameters TControl The type of the control exposed by this mashup visualizer. TControlBuilder The type of the workflow element used to create the mashup control. Inheritance object DialogTypeVisualizer MashupVisualizer MashupControlVisualizerBase<TControl, TControlBuilder> Derived ContainerControlVisualizerBase<TControl, TControlBuilder> GraphPanelVisualizer RollingGraphPanelVisualizer Inherited Members MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Control Gets the active mashup control exposed by this type visualizer. public TControl Control { get; } Property Value TControl Methods CreateControl(IServiceProvider, TControlBuilder) Creates and configures the mashup control associated with the specified workflow operator. protected abstract TControl CreateControl(IServiceProvider provider, TControlBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder TControlBuilder The ExpressionBuilder object used to provide configuration properties to the mashup control. Returns TControl A new instance of the mashup control class associated with the specified workflow operator. Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. LoadMashupSource(int, MashupSource, IServiceProvider) Loads type visualizer resources for an individual mashup source in the mashup visualizer. protected virtual void LoadMashupSource(int index, MashupSource mashupSource, IServiceProvider provider) Parameters index int The zero-based index of the mashup source. mashupSource MashupSource The mashup source for which to load visualizer resources. provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. LoadMashups(IServiceProvider) Loads type visualizer resources for all sources combined in the mashup visualizer. public override void LoadMashups(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload() Visualize(IObservable<IObservable<object>>, IServiceProvider) Creates an observable sequence used to visualize all notifications emitted by a workflow operator, using this type visualizer and the specified service provider. public override IObservable<object> Visualize(IObservable<IObservable<object>> source, IServiceProvider provider) Parameters source IObservable<IObservable<object>> An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Returns IObservable<object> An observable sequence where every notification updates the type visualizer object in the UI thread."
  },
  "api/Bonsai.Gui.PropertyGridBuilder.html": {
    "href": "api/Bonsai.Gui.PropertyGridBuilder.html",
    "title": "Class PropertyGridBuilder | Bonsai.Gui",
    "keywords": "Class PropertyGridBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a property grid control for browsing the properties of the workflow in which it is inserted. [TypeVisualizer(typeof(PropertyGridVisualizer))] public class PropertyGridBuilder : ControlBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase PropertyGridBuilder Implements IExpressionBuilder INamedElement Inherited Members ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ControlBuilderBase.Build(IEnumerable<Expression>) ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AutoRefresh Gets or sets a value specifying whether the property grid should refresh whenever the value of any property changes. public bool AutoRefresh { get; set; } Property Value bool HelpVisible Gets or sets a value specifying whether the help text box is visible. public bool HelpVisible { get; set; } Property Value bool ToolbarVisible Gets or sets a value specifying whether the toolbar is visible. public bool ToolbarVisible { get; set; } Property Value bool"
  },
  "api/Bonsai.Gui.PropertyGridVisualizer.html": {
    "href": "api/Bonsai.Gui.PropertyGridVisualizer.html",
    "title": "Class PropertyGridVisualizer | Bonsai.Gui",
    "keywords": "Class PropertyGridVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a property grid control. public class PropertyGridVisualizer : ControlVisualizerBase<PropertyGrid, PropertyGridBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<PropertyGrid, PropertyGridBuilder> PropertyGridVisualizer Inherited Members ControlVisualizerBase<PropertyGrid, PropertyGridBuilder>.Control ControlVisualizerBase<PropertyGrid, PropertyGridBuilder>.CreateControl(IServiceProvider, PropertyGridBuilder) ControlVisualizerBase<PropertyGrid, PropertyGridBuilder>.Load(IServiceProvider) ControlVisualizerBase<PropertyGrid, PropertyGridBuilder>.Show(object) ControlVisualizerBase<PropertyGrid, PropertyGridBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, PropertyGridBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override PropertyGrid CreateControl(IServiceProvider provider, PropertyGridBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder PropertyGridBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns PropertyGrid A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.RadioButtonBuilder.html": {
    "href": "api/Bonsai.Gui.RadioButtonBuilder.html",
    "title": "Class RadioButtonBuilder | Bonsai.Gui",
    "keywords": "Class RadioButtonBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a radio button control and generates a sequence of notifications whenever the checked status changes. [TypeVisualizer(typeof(RadioButtonVisualizer))] public class RadioButtonBuilder : CheckButtonBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase TextControlBuilderBase<bool> ButtonBuilderBase<bool> CheckButtonBuilderBase RadioButtonBuilder Implements IExpressionBuilder INamedElement Inherited Members CheckButtonBuilderBase.Checked CheckButtonBuilderBase.Generate() TextControlBuilderBase<bool>.Build(IEnumerable<Expression>) TextControlBuilderBase.Text ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.RadioButtonVisualizer.html": {
    "href": "api/Bonsai.Gui.RadioButtonVisualizer.html",
    "title": "Class RadioButtonVisualizer | Bonsai.Gui",
    "keywords": "Class RadioButtonVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a radio button control. public class RadioButtonVisualizer : ControlVisualizerBase<RadioButton, RadioButtonBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<RadioButton, RadioButtonBuilder> RadioButtonVisualizer Inherited Members ControlVisualizerBase<RadioButton, RadioButtonBuilder>.Control ControlVisualizerBase<RadioButton, RadioButtonBuilder>.CreateControl(IServiceProvider, RadioButtonBuilder) ControlVisualizerBase<RadioButton, RadioButtonBuilder>.Load(IServiceProvider) ControlVisualizerBase<RadioButton, RadioButtonBuilder>.Show(object) ControlVisualizerBase<RadioButton, RadioButtonBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, RadioButtonBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override RadioButton CreateControl(IServiceProvider provider, RadioButtonBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder RadioButtonBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns RadioButton A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.SliderBuilder.html": {
    "href": "api/Bonsai.Gui.SliderBuilder.html",
    "title": "Class SliderBuilder | Bonsai.Gui",
    "keywords": "Class SliderBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a slider control and generates a sequence of notifications whenever the slider value changes. [TypeVisualizer(typeof(SliderVisualizer))] public class SliderBuilder : ControlBuilderBase<double>, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase ControlBuilderBase<double> SliderBuilder Implements IExpressionBuilder INamedElement Inherited Members ControlBuilderBase<double>.Build(IEnumerable<Expression>) ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties DecimalPlaces Gets or sets the optional maximum number of decimal places used when formatting the numeric display of the slider. public int? DecimalPlaces { get; set; } Property Value int? Maximum Gets or sets the upper limit of values in the slider. public double Maximum { get; set; } Property Value double Minimum Gets or sets the lower limit of values in the slider. public double Minimum { get; set; } Property Value double Value Gets or sets a numeric value which represents the position of the slider. public double Value { get; set; } Property Value double Methods Generate() Generates an observable sequence of event notifications from the UI control. protected override IObservable<double> Generate() Returns IObservable<double> An observable sequence of events of type double."
  },
  "api/Bonsai.Gui.SliderVisualizer.html": {
    "href": "api/Bonsai.Gui.SliderVisualizer.html",
    "title": "Class SliderVisualizer | Bonsai.Gui",
    "keywords": "Class SliderVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a slider control. public class SliderVisualizer : ControlVisualizerBase<Slider, SliderBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<Slider, SliderBuilder> SliderVisualizer Inherited Members ControlVisualizerBase<Slider, SliderBuilder>.Control ControlVisualizerBase<Slider, SliderBuilder>.CreateControl(IServiceProvider, SliderBuilder) ControlVisualizerBase<Slider, SliderBuilder>.Load(IServiceProvider) ControlVisualizerBase<Slider, SliderBuilder>.Show(object) ControlVisualizerBase<Slider, SliderBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, SliderBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override Slider CreateControl(IServiceProvider provider, SliderBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder SliderBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns Slider A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.TabControlBuilder.html": {
    "href": "api/Bonsai.Gui.TabControlBuilder.html",
    "title": "Class TabControlBuilder | Bonsai.Gui",
    "keywords": "Class TabControlBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that specifies a mashup visualizer that can be used to arrange other visualizers using a related set of tab pages. [TypeVisualizer(typeof(TabControlVisualizer))] public class TabControlBuilder : ControlBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TabControlBuilder Implements IExpressionBuilder INamedElement Inherited Members ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ControlBuilderBase.Build(IEnumerable<Expression>) ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.TabControlVisualizer.html": {
    "href": "api/Bonsai.Gui.TabControlVisualizer.html",
    "title": "Class TabControlVisualizer | Bonsai.Gui",
    "keywords": "Class TabControlVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer that can be used to arrange other visualizers using a related set of tab pages. public class TabControlVisualizer : ContainerControlVisualizerBase<TabControl, TabControlBuilder> Inheritance object DialogTypeVisualizer MashupVisualizer MashupControlVisualizerBase<TabControl, TabControlBuilder> ContainerControlVisualizerBase<TabControl, TabControlBuilder> TabControlVisualizer Inherited Members ContainerControlVisualizerBase<TabControl, TabControlBuilder>.AddControl(int, Control) ContainerControlVisualizerBase<TabControl, TabControlBuilder>.LoadMashupSource(int, MashupSource, IServiceProvider) ContainerControlVisualizerBase<TabControl, TabControlBuilder>.UnloadMashups() ContainerControlVisualizerBase<TabControl, TabControlBuilder>.GetMashupSource(int, int) MashupControlVisualizerBase<TabControl, TabControlBuilder>.Control MashupControlVisualizerBase<TabControl, TabControlBuilder>.CreateControl(IServiceProvider, TabControlBuilder) MashupControlVisualizerBase<TabControl, TabControlBuilder>.Load(IServiceProvider) MashupControlVisualizerBase<TabControl, TabControlBuilder>.LoadMashups(IServiceProvider) MashupControlVisualizerBase<TabControl, TabControlBuilder>.Show(object) MashupControlVisualizerBase<TabControl, TabControlBuilder>.Visualize(IObservable<IObservable<object>>, IServiceProvider) MashupControlVisualizerBase<TabControl, TabControlBuilder>.Unload() MashupVisualizer.Load(IServiceProvider) MashupVisualizer.Unload() MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddControl(int, Control) Adds a control to the container at the specified index. protected override void AddControl(int index, Control control) Parameters index int The index of the control, following the order of visualizer sources. control Control The control to add to the container. CreateControl(IServiceProvider, TabControlBuilder) Creates and configures the mashup control associated with the specified workflow operator. protected override TabControl CreateControl(IServiceProvider provider, TabControlBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder TabControlBuilder The ExpressionBuilder object used to provide configuration properties to the mashup control. Returns TabControl A new instance of the mashup control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.TableLayoutPanelBuilder.html": {
    "href": "api/Bonsai.Gui.TableLayoutPanelBuilder.html",
    "title": "Class TableLayoutPanelBuilder | Bonsai.Gui",
    "keywords": "Class TableLayoutPanelBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that specifies a mashup visualizer panel that can be used to arrange other visualizers in a grid. [TypeVisualizer(typeof(TableLayoutPanelVisualizer))] public class TableLayoutPanelBuilder : ControlBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TableLayoutPanelBuilder Implements IExpressionBuilder INamedElement Inherited Members ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ControlBuilderBase.Build(IEnumerable<Expression>) ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties CellSpans Gets a collection of TableLayoutPanelCellSpan objects specifying the column and row span of each cell in the visualizer grid layout. public Collection<TableLayoutPanelCellSpan> CellSpans { get; } Property Value Collection<TableLayoutPanelCellSpan> ColumnCount Gets or sets the number of columns in the visualizer grid layout. public int ColumnCount { get; set; } Property Value int ColumnStyles Gets a collection of ColumnStyle objects specifying the size ratio of the columns in the visualizer grid layout. public Collection<ColumnStyle> ColumnStyles { get; } Property Value Collection<ColumnStyle> RowCount Gets or sets the number of rows in the visualizer grid layout. public int RowCount { get; set; } Property Value int RowStyles Gets a collection of RowStyle objects specifying the size ratio of the rows in the visualizer grid layout. public Collection<RowStyle> RowStyles { get; } Property Value Collection<RowStyle>"
  },
  "api/Bonsai.Gui.TableLayoutPanelCellSpan.html": {
    "href": "api/Bonsai.Gui.TableLayoutPanelCellSpan.html",
    "title": "Class TableLayoutPanelCellSpan | Bonsai.Gui",
    "keywords": "Class TableLayoutPanelCellSpan Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents the vertical and horizontal span of a table layout cell. public class TableLayoutPanelCellSpan Inheritance object TableLayoutPanelCellSpan Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TableLayoutPanelCellSpan() Initializes a new instance of the TableLayoutPanelCellSpan class. public TableLayoutPanelCellSpan() TableLayoutPanelCellSpan(int, int) Initializes a new instance of the TableLayoutPanelCellSpan class using the specified column and row span. public TableLayoutPanelCellSpan(int columnSpan, int rowSpan) Parameters columnSpan int The number of columns spanned by the table layout cell. rowSpan int The number of rows spanned by the table layout cell. Properties ColumnSpan Gets the number of columns spanned by this table layout cell. public int ColumnSpan { get; set; } Property Value int RowSpan Gets the number of rows spanned by this table layout cell. public int RowSpan { get; set; } Property Value int Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Bonsai.Gui.TableLayoutPanelVisualizer.html": {
    "href": "api/Bonsai.Gui.TableLayoutPanelVisualizer.html",
    "title": "Class TableLayoutPanelVisualizer | Bonsai.Gui",
    "keywords": "Class TableLayoutPanelVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer that can be used to arrange other visualizers in a grid. public class TableLayoutPanelVisualizer : ContainerControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder> Inheritance object DialogTypeVisualizer MashupVisualizer MashupControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder> ContainerControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder> TableLayoutPanelVisualizer Inherited Members ContainerControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.AddControl(int, Control) ContainerControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.LoadMashupSource(int, MashupSource, IServiceProvider) ContainerControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.UnloadMashups() ContainerControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.GetMashupSource(int, int) MashupControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.Control MashupControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.CreateControl(IServiceProvider, TableLayoutPanelBuilder) MashupControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.Load(IServiceProvider) MashupControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.LoadMashups(IServiceProvider) MashupControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.Show(object) MashupControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.Visualize(IObservable<IObservable<object>>, IServiceProvider) MashupControlVisualizerBase<TableLayoutPanel, TableLayoutPanelBuilder>.Unload() MashupVisualizer.Load(IServiceProvider) MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddControl(int, Control) Adds a control to the container at the specified index. protected override void AddControl(int index, Control control) Parameters index int The index of the control, following the order of visualizer sources. control Control The control to add to the container. CreateControl(IServiceProvider, TableLayoutPanelBuilder) Creates and configures the mashup control associated with the specified workflow operator. protected override TableLayoutPanel CreateControl(IServiceProvider provider, TableLayoutPanelBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder TableLayoutPanelBuilder The ExpressionBuilder object used to provide configuration properties to the mashup control. Returns TableLayoutPanel A new instance of the mashup control class associated with the specified workflow operator. LoadMashups(IServiceProvider) Loads type visualizer resources for all sources combined in the mashup visualizer. public override void LoadMashups(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Unload() Unloads all type visualizer resources. public override void Unload() UnloadMashups() Unloads resources for all sources combined in the mashup visualizer. public override void UnloadMashups()"
  },
  "api/Bonsai.Gui.TextBoxBuilder.html": {
    "href": "api/Bonsai.Gui.TextBoxBuilder.html",
    "title": "Class TextBoxBuilder | Bonsai.Gui",
    "keywords": "Class TextBoxBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a text box control and generates a sequence of notifications whenever the text changes. [TypeVisualizer(typeof(TextBoxVisualizer))] public class TextBoxBuilder : TextControlBuilderBase<string>, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase TextControlBuilderBase<string> TextBoxBuilder Implements IExpressionBuilder INamedElement Inherited Members TextControlBuilderBase<string>.Build(IEnumerable<Expression>) TextControlBuilderBase.Text ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Multiline Gets or sets a value specifying whether the text box is multiline. public bool Multiline { get; set; } Property Value bool Methods Generate() Generates an observable sequence of values containing the contents of the text box whenever the text changes. protected override IObservable<string> Generate() Returns IObservable<string> A sequence of string values representing the contents of the text box."
  },
  "api/Bonsai.Gui.TextBoxVisualizer.html": {
    "href": "api/Bonsai.Gui.TextBoxVisualizer.html",
    "title": "Class TextBoxVisualizer | Bonsai.Gui",
    "keywords": "Class TextBoxVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a text box control. public class TextBoxVisualizer : ControlVisualizerBase<TextBox, TextBoxBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<TextBox, TextBoxBuilder> TextBoxVisualizer Inherited Members ControlVisualizerBase<TextBox, TextBoxBuilder>.Control ControlVisualizerBase<TextBox, TextBoxBuilder>.CreateControl(IServiceProvider, TextBoxBuilder) ControlVisualizerBase<TextBox, TextBoxBuilder>.Load(IServiceProvider) ControlVisualizerBase<TextBox, TextBoxBuilder>.Show(object) ControlVisualizerBase<TextBox, TextBoxBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, TextBoxBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override TextBox CreateControl(IServiceProvider provider, TextBoxBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder TextBoxBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns TextBox A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.TextControlBuilderBase-1.html": {
    "href": "api/Bonsai.Gui.TextControlBuilderBase-1.html",
    "title": "Class TextControlBuilderBase<TEvent> | Bonsai.Gui",
    "keywords": "Class TextControlBuilderBase<TEvent> Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class with common UI text and event source control functionality. public abstract class TextControlBuilderBase<TEvent> : TextControlBuilderBase, IExpressionBuilder, INamedElement Type Parameters TEvent The type of event notifications emitted by the UI control. Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase TextControlBuilderBase<TEvent> Implements IExpressionBuilder INamedElement Derived ButtonBuilderBase<TEvent> TextBoxBuilder Inherited Members TextControlBuilderBase.Text ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the UI control. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node. Generate() Generates an observable sequence of event notifications from the UI control. protected abstract IObservable<TEvent> Generate() Returns IObservable<TEvent> An observable sequence of events of type TEvent."
  },
  "api/Bonsai.Gui.TextControlBuilderBase.html": {
    "href": "api/Bonsai.Gui.TextControlBuilderBase.html",
    "title": "Class TextControlBuilderBase | Bonsai.Gui",
    "keywords": "Class TextControlBuilderBase Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides an abstract base class for common UI text control functionality. public abstract class TextControlBuilderBase : ControlBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase Implements IExpressionBuilder INamedElement Derived GroupBoxBuilder LabelBuilder TextControlBuilderBase<TEvent> Inherited Members ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ControlBuilderBase.Build(IEnumerable<Expression>) ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Text Gets or sets the text associated with this control. public string Text { get; set; } Property Value string"
  },
  "api/Bonsai.Gui.ToggleButtonBuilder.html": {
    "href": "api/Bonsai.Gui.ToggleButtonBuilder.html",
    "title": "Class ToggleButtonBuilder | Bonsai.Gui",
    "keywords": "Class ToggleButtonBuilder Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Represents an operator that interfaces with a toggle button control and generates a sequence of notifications whenever the toggle status changes. [TypeVisualizer(typeof(ToggleButtonVisualizer))] public class ToggleButtonBuilder : CheckButtonBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder ControlBuilderBase TextControlBuilderBase TextControlBuilderBase<bool> ButtonBuilderBase<bool> CheckButtonBuilderBase ToggleButtonBuilder Implements IExpressionBuilder INamedElement Inherited Members CheckButtonBuilderBase.Checked CheckButtonBuilderBase.Generate() TextControlBuilderBase<bool>.Build(IEnumerable<Expression>) TextControlBuilderBase.Text ControlBuilderBase.Name ControlBuilderBase.Enabled ControlBuilderBase.Visible ControlBuilderBase.Font ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/Bonsai.Gui.ToggleButtonVisualizer.html": {
    "href": "api/Bonsai.Gui.ToggleButtonVisualizer.html",
    "title": "Class ToggleButtonVisualizer | Bonsai.Gui",
    "keywords": "Class ToggleButtonVisualizer Namespace Bonsai.Gui Assembly Bonsai.Gui.dll Provides a type visualizer representing a toggle button control. public class ToggleButtonVisualizer : ControlVisualizerBase<CheckBox, ToggleButtonBuilder> Inheritance object DialogTypeVisualizer ControlVisualizerBase<CheckBox, ToggleButtonBuilder> ToggleButtonVisualizer Inherited Members ControlVisualizerBase<CheckBox, ToggleButtonBuilder>.Control ControlVisualizerBase<CheckBox, ToggleButtonBuilder>.CreateControl(IServiceProvider, ToggleButtonBuilder) ControlVisualizerBase<CheckBox, ToggleButtonBuilder>.Load(IServiceProvider) ControlVisualizerBase<CheckBox, ToggleButtonBuilder>.Show(object) ControlVisualizerBase<CheckBox, ToggleButtonBuilder>.Unload() DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Load(IServiceProvider) DialogTypeVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateControl(IServiceProvider, ToggleButtonBuilder) Creates and configures the visual control associated with the specified workflow operator. protected override CheckBox CreateControl(IServiceProvider provider, ToggleButtonBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder ToggleButtonBuilder The ExpressionBuilder object used to provide configuration properties to the control. Returns CheckBox A new instance of the control class associated with the specified workflow operator."
  },
  "api/Bonsai.Gui.ZedGraph.BarGraphBuilder.html": {
    "href": "api/Bonsai.Gui.ZedGraph.BarGraphBuilder.html",
    "title": "Class BarGraphBuilder | Bonsai.Gui",
    "keywords": "Class BarGraphBuilder Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Represents an operator that configures a visualizer to plot each element of the sequence as a bar graph. [TypeVisualizer(typeof(BarGraphVisualizer))] public class BarGraphBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder BarGraphBuilder Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties BarType Gets or sets a value specifying how the different bars in the graph will be visually arranged. public BarType BarType { get; set; } Property Value BarType BaseAxis Gets or sets a value specifying the axis on which the bars in the graph will be displayed. [TypeConverter(typeof(BaseAxisConverter))] public BarBase BaseAxis { get; set; } Property Value BarBase Capacity Gets or sets the optional capacity used for rolling bar graphs. If no capacity is specified, all data points will be displayed. public int? Capacity { get; set; } Property Value int? CurveSettings Gets the optional settings for each bar added to the graph. public Collection<CurveConfiguration> CurveSettings { get; } Property Value Collection<CurveConfiguration> IndexSelector Gets or sets the name of the property that will be used as index for the graph. public string IndexSelector { get; set; } Property Value string Max Gets or sets a value specifying a fixed upper limit for the bar range axis. If no fixed range is specified, the graph limits can be edited online. public double? Max { get; set; } Property Value double? Min Gets or sets a value specifying a fixed lower limit for the bar range axis. If no fixed range is specified, the graph limits can be edited online. public double? Min { get; set; } Property Value double? ValueSelector Gets or sets the names of the properties that will be displayed in the graph. public string ValueSelector { get; set; } Property Value string Methods Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the bar graph visualizer on the specified input argument. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Bonsai.Gui.ZedGraph.BarGraphOverlay.html": {
    "href": "api/Bonsai.Gui.ZedGraph.BarGraphOverlay.html",
    "title": "Class BarGraphOverlay | Bonsai.Gui",
    "keywords": "Class BarGraphOverlay Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Provides a type visualizer used to overlay a sequence of values as a bar graph. public class BarGraphOverlay : BufferedVisualizer Inheritance object DialogTypeVisualizer BufferedVisualizer BarGraphOverlay Inherited Members BufferedVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) BufferedVisualizer.TargetInterval DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(DateTime, object) Updates the type visualizer to display a buffered value object received at the specified time. protected override void Show(DateTime time, object value) Parameters time DateTime The time at which the value was received. value object The value to visualize. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) Updates the type visualizer with a new buffer of timestamped values. protected override void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> A buffer of timestamped values where each timestamp indicates the time at which the value was received. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Gui.ZedGraph.BarGraphVisualizer.html": {
    "href": "api/Bonsai.Gui.ZedGraph.BarGraphVisualizer.html",
    "title": "Class BarGraphVisualizer | Bonsai.Gui",
    "keywords": "Class BarGraphVisualizer Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Provides a type visualizer to display an object as a bar graph. public class BarGraphVisualizer : BufferedVisualizer Inheritance object DialogTypeVisualizer BufferedVisualizer BarGraphVisualizer Inherited Members BufferedVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) BufferedVisualizer.TargetInterval object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AutoScale Gets or sets a value indicating whether the bar range scale should be recalculated automatically as the graph updates. public bool AutoScale { get; set; } Property Value bool Capacity Gets or sets the maximum number of data points displayed at any one moment in the bar graph. public int Capacity { get; set; } Property Value int Max Gets or sets the upper limit for the bar range axis when using a fixed scale. public double Max { get; set; } Property Value double Min Gets or sets the lower limit for the bar range axis when using a fixed scale. public double Min { get; set; } Property Value double Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. SequenceCompleted() Updates the type visualizer when one of the active subscriptions gracefully terminates. public override void SequenceCompleted() Show(DateTime, object) Updates the type visualizer to display a buffered value object received at the specified time. protected override void Show(DateTime time, object value) Parameters time DateTime The time at which the value was received. value object The value to visualize. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) Updates the type visualizer with a new buffer of timestamped values. protected override void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> A buffer of timestamped values where each timestamp indicates the time at which the value was received. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Gui.ZedGraph.CurveConfiguration.html": {
    "href": "api/Bonsai.Gui.ZedGraph.CurveConfiguration.html",
    "title": "Class CurveConfiguration | Bonsai.Gui",
    "keywords": "Class CurveConfiguration Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Represents common configuration properties for individual curves in a graph. public class CurveConfiguration Inheritance object CurveConfiguration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Color Gets or sets the color of the curve. public Color Color { get; set; } Property Value Color ColorHtml Gets or sets an HTML representation of the curve color value for serialization. [Browsable(false)] public string ColorHtml { get; set; } Property Value string Label Gets or sets the label that will appear in the legend. public string Label { get; set; } Property Value string"
  },
  "api/Bonsai.Gui.ZedGraph.GraphControl.html": {
    "href": "api/Bonsai.Gui.ZedGraph.GraphControl.html",
    "title": "Class GraphControl | Bonsai.Gui",
    "keywords": "Class GraphControl Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Provides a dynamic graph control with a built-in color cycle palette. public class GraphControl : ZedGraphControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl ZedGraphControl GraphControl Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members ZedGraphControl.MenuClick_Copy(object, EventArgs) ZedGraphControl.Copy(bool) ZedGraphControl.CopyEmf(bool) ZedGraphControl.MenuClick_SaveAs(object, EventArgs) ZedGraphControl.SaveAs() ZedGraphControl.SaveAs(string) ZedGraphControl.SaveAsBitmap() ZedGraphControl.SaveAsEmf() ZedGraphControl.MenuClick_ShowValues(object, EventArgs) ZedGraphControl.MenuClick_RestoreScale(object, EventArgs) ZedGraphControl.RestoreScale(GraphPane) ZedGraphControl.MenuClick_ZoomOut(object, EventArgs) ZedGraphControl.ZoomOut(GraphPane) ZedGraphControl.MenuClick_ZoomOutAll(object, EventArgs) ZedGraphControl.ZoomOutAll(GraphPane) ZedGraphControl.Dispose(bool) ZedGraphControl.ZedGraphControl_ReSize(object, EventArgs) ZedGraphControl.AxisChange() ZedGraphControl.ZedGraphControl_MouseDown(object, MouseEventArgs) ZedGraphControl.SetCursor() ZedGraphControl.SetCursor(Point) ZedGraphControl.ZedGraphControl_KeyUp(object, KeyEventArgs) ZedGraphControl.ZedGraphControl_KeyDown(object, KeyEventArgs) ZedGraphControl.ZedGraphControl_MouseUp(object, MouseEventArgs) ZedGraphControl.MakeValueLabel(Axis, double, int, bool) ZedGraphControl.ZedGraphControl_MouseMove(object, MouseEventArgs) ZedGraphControl.ZedGraphControl_MouseWheel(object, MouseEventArgs) ZedGraphControl.ZoomPane(GraphPane, double, PointF, bool, bool) ZedGraphControl.ZoomPane(GraphPane, double, PointF, bool) ZedGraphControl.ZoomScale(Axis, double, double, bool) ZedGraphControl.PanScale(Axis, double, double) ZedGraphControl.MenuClick_PageSetup(object, EventArgs) ZedGraphControl.MenuClick_Print(object, EventArgs) ZedGraphControl.DoPageSetup() ZedGraphControl.DoPrint() ZedGraphControl.DoPrintPreview() ZedGraphControl.GetImage() ZedGraphControl.SetScrollRangeFromData() ZedGraphControl.UseExtendedPrintDialog ZedGraphControl.PrintDocument ZedGraphControl.ZoomButtons ZedGraphControl.ZoomButtons2 ZedGraphControl.ZoomModifierKeys ZedGraphControl.ZoomModifierKeys2 ZedGraphControl.PanButtons ZedGraphControl.PanButtons2 ZedGraphControl.PanModifierKeys ZedGraphControl.PanModifierKeys2 ZedGraphControl.EditButtons ZedGraphControl.EditModifierKeys ZedGraphControl.SelectButtons ZedGraphControl.SelectModifierKeys ZedGraphControl.SelectAppendModifierKeys ZedGraphControl.LinkButtons ZedGraphControl.LinkModifierKeys ZedGraphControl.MasterPane ZedGraphControl.GraphPane ZedGraphControl.IsAntiAlias ZedGraphControl.IsShowPointValues ZedGraphControl.IsShowCursorValues ZedGraphControl.IsEnableHEdit ZedGraphControl.IsEnableVEdit ZedGraphControl.IsEnableZoom ZedGraphControl.IsEnableHZoom ZedGraphControl.IsEnableVZoom ZedGraphControl.IsEnableWheelZoom ZedGraphControl.IsEnableHPan ZedGraphControl.IsEnableVPan ZedGraphControl.IsShowContextMenu ZedGraphControl.IsShowCopyMessage ZedGraphControl.SaveFileDialog ZedGraphControl.IsPrintKeepAspectRatio ZedGraphControl.IsPrintFillPage ZedGraphControl.IsPrintScaleAll ZedGraphControl.IsAutoScrollRange ZedGraphControl.ScrollGrace ZedGraphControl.IsShowHScrollBar ZedGraphControl.IsShowVScrollBar ZedGraphControl.IsSynchronizeXAxes ZedGraphControl.IsSynchronizeYAxes ZedGraphControl.IsScrollY2 ZedGraphControl.YScrollRangeList ZedGraphControl.Y2ScrollRangeList ZedGraphControl.ScrollMinX ZedGraphControl.ScrollMaxX ZedGraphControl.ScrollMinY ZedGraphControl.ScrollMaxY ZedGraphControl.ScrollMinY2 ZedGraphControl.ScrollMaxY2 ZedGraphControl.IsScrolling ZedGraphControl.PointValueFormat ZedGraphControl.PointDateFormat ZedGraphControl.ZoomStepFraction ZedGraphControl.IsZoomOnMouseCenter ZedGraphControl.BeenDisposed ZedGraphControl.Selection ZedGraphControl.IsEnableSelection ZedGraphControl.ContextMenuBuilder ZedGraphControl.ZoomEvent ZedGraphControl.ScrollDoneEvent ZedGraphControl.ScrollProgressEvent ZedGraphControl.ScrollEvent ZedGraphControl.PointEditEvent ZedGraphControl.PointValueEvent ZedGraphControl.CursorValueEvent ZedGraphControl.MouseDownEvent ZedGraphControl.MouseUpEvent ZedGraphControl.MouseMoveEvent ZedGraphControl.DoubleClickEvent ZedGraphControl.LinkEvent UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnLoad(EventArgs) UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(ref Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.AdjustFormScrollbars(bool) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessCmdKey(ref Message, Keys) ContainerControl.ProcessMnemonic(char) ContainerControl.ProcessTabKey(bool) ContainerControl.Select(bool, bool) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(ref Message) Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.RescaleConstantsForDpi(int, int) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.ProcessKeyPreview(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SetBoundsCore(int, int, int, int, BoundsSpecified) Control.SetClientSizeCore(int, int) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.SetVisibleCore(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ControlExtensions.SubscribeTo<TSource>(Control, ObservableCollection<TSource>, Action<TSource[]>) ControlExtensions.SubscribeTo<TSource>(Control, IObservable<TSource>, Action<TSource>) Constructors GraphControl() Initializes a new instance of the GraphControl class. public GraphControl() Properties AutoScaleAxis Gets or sets a value indicating whether to recalculate the axis range automatically when redrawing the graph. public bool AutoScaleAxis { get; set; } Property Value bool MouseDown Occurs when the mouse pointer is over the control and a mouse button is pressed. public IObservable<MouseEventArgs> MouseDown { get; } Property Value IObservable<MouseEventArgs> MouseMove Occurs when the mouse pointer is moved over the control. public IObservable<MouseEventArgs> MouseMove { get; } Property Value IObservable<MouseEventArgs> MouseUp Occurs when the mouse pointer is over the control and a mouse button is released. public IObservable<MouseEventArgs> MouseUp { get; } Property Value IObservable<MouseEventArgs> Methods GetColor(int) Returns the color in the color cycle at the specified index. public static Color GetColor(int colorIndex) Parameters colorIndex int The index of the color to retrieve. Returns Color A Color value representing the color at the specified index of the color cycle. GetNextColor() Returns the next color in the color cycle, and increments the color index. public Color GetNextColor() Returns Color A Color value representing the next color in the color cycle. GetNormalizedRectangle(RectangleF, Point, Point) Computes a rectangle defined by the specified points which is also contained inside the pane boundaries. protected static Rectangle GetNormalizedRectangle(RectangleF bounds, Point p1, Point p2) Parameters bounds RectangleF The bounds of the pane on which to contain the rectangle. p1 Point The first point defining the selected rectangle. p2 Point The second point defining the selected rectangle. Returns Rectangle A Rectangle which is contained inside the pane boundaries and is defined by the specified points. OnHandleDestroyed(EventArgs) Raises the HandleDestroyed event. protected override void OnHandleDestroyed(EventArgs e) Parameters e EventArgs An EventArgs that contains the event data. OnPaint(PaintEventArgs) Called by the system to update the control on-screen protected override void OnPaint(PaintEventArgs e) Parameters e PaintEventArgs A PaintEventArgs object containing the Graphics specifications for this Paint event. ResetColorCycle() Resets the color cycle to the first color in the palette. public void ResetColorCycle() SetLayout(int, int) Sets the number of rows and columns in the layout explicitly for graphs with multiple panes. public void SetLayout(int rows, int columns) Parameters rows int The number of rows in the pane layout. columns int The number of columns in the pane layout. SetLayout(PaneLayout) Sets the auto layout strategy for graphs with multiple panes. public void SetLayout(PaneLayout layout) Parameters layout PaneLayout Specifies the auto layout options for graphs with multiple panes. UpdateRubberBand(Rectangle, Rectangle) Updates the state of the rubber band selection overlay. protected void UpdateRubberBand(Rectangle bandRect, Rectangle invalidateRect) Parameters bandRect Rectangle The location and size of the rubber band selection. invalidateRect Rectangle The region of the control that should be invalidated following the rubber band update operation. See the Invalidate(Rectangle) method."
  },
  "api/Bonsai.Gui.ZedGraph.GraphPanelBuilder.html": {
    "href": "api/Bonsai.Gui.ZedGraph.GraphPanelBuilder.html",
    "title": "Class GraphPanelBuilder | Bonsai.Gui",
    "keywords": "Class GraphPanelBuilder Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Represents an operator that specifies a mashup graph panel that can be used to combine multiple plots sharing the same axes. [TypeVisualizer(typeof(GraphPanelVisualizer))] public class GraphPanelBuilder : GraphPanelBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder GraphPanelBuilderBase GraphPanelBuilder Implements IExpressionBuilder INamedElement Inherited Members GraphPanelBuilderBase.Name GraphPanelBuilderBase.ReverseX GraphPanelBuilderBase.ReverseY GraphPanelBuilderBase.Span GraphPanelBuilderBase.Capacity ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties XMax Gets or sets a value specifying a fixed upper limit for the X-axis range. If no fixed range is specified, the graph limits can be edited online. public double? XMax { get; set; } Property Value double? XMin Gets or sets a value specifying a fixed lower limit for the X-axis range. If no fixed range is specified, the graph limits can be edited online. public double? XMin { get; set; } Property Value double? YMax Gets or sets a value specifying a fixed upper limit for the Y-axis range. If no fixed range is specified, the graph limits can be edited online. public double? YMax { get; set; } Property Value double? YMin Gets or sets a value specifying a fixed lower limit for the Y-axis range. If no fixed range is specified, the graph limits can be edited online. public double? YMin { get; set; } Property Value double? Methods Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the graph panel visualizer. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Bonsai.Gui.ZedGraph.GraphPanelBuilderBase.html": {
    "href": "api/Bonsai.Gui.ZedGraph.GraphPanelBuilderBase.html",
    "title": "Class GraphPanelBuilderBase | Bonsai.Gui",
    "keywords": "Class GraphPanelBuilderBase Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Provides an abstract base class with common mashup graph panel functionality. public abstract class GraphPanelBuilderBase : ZeroArgumentExpressionBuilder, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder GraphPanelBuilderBase Implements IExpressionBuilder INamedElement Derived GraphPanelBuilder RollingGraphPanelBuilder Inherited Members ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Capacity Gets or sets the optional capacity used for rolling line graphs. If no capacity is specified, all data points will be displayed. public int? Capacity { get; set; } Property Value int? Name Gets or sets the name of the visualizer window. public string Name { get; set; } Property Value string ReverseX Gets or sets a value specifying whether the scale values are reversed on the X-axis. public bool ReverseX { get; set; } Property Value bool ReverseY Gets or sets a value specifying whether the scale values are reversed on the Y-axis. public bool ReverseY { get; set; } Property Value bool Span Gets or sets the optional maximum span of data displayed at any one moment in the graph. If no span is specified, all data points will be displayed. public double? Span { get; set; } Property Value double?"
  },
  "api/Bonsai.Gui.ZedGraph.GraphPanelVisualizer.html": {
    "href": "api/Bonsai.Gui.ZedGraph.GraphPanelVisualizer.html",
    "title": "Class GraphPanelVisualizer | Bonsai.Gui",
    "keywords": "Class GraphPanelVisualizer Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Provides a type visualizer that can be used to overlay multiple plots sharing the same axes in a single graph panel. public class GraphPanelVisualizer : MashupControlVisualizerBase<GraphControl, GraphPanelBuilder> Inheritance object DialogTypeVisualizer MashupVisualizer MashupControlVisualizerBase<GraphControl, GraphPanelBuilder> GraphPanelVisualizer Inherited Members MashupControlVisualizerBase<GraphControl, GraphPanelBuilder>.Control MashupControlVisualizerBase<GraphControl, GraphPanelBuilder>.CreateControl(IServiceProvider, GraphPanelBuilder) MashupControlVisualizerBase<GraphControl, GraphPanelBuilder>.Load(IServiceProvider) MashupControlVisualizerBase<GraphControl, GraphPanelBuilder>.LoadMashups(IServiceProvider) MashupControlVisualizerBase<GraphControl, GraphPanelBuilder>.LoadMashupSource(int, MashupSource, IServiceProvider) MashupControlVisualizerBase<GraphControl, GraphPanelBuilder>.Show(object) MashupControlVisualizerBase<GraphControl, GraphPanelBuilder>.Visualize(IObservable<IObservable<object>>, IServiceProvider) MashupControlVisualizerBase<GraphControl, GraphPanelBuilder>.Unload() MashupVisualizer.Load(IServiceProvider) MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AutoScaleX Gets or sets a value indicating whether the axis range should be recalculated automatically as the graph updates. public bool AutoScaleX { get; set; } Property Value bool AutoScaleY Gets or sets a value indicating whether the axis range should be recalculated automatically as the graph updates. public bool AutoScaleY { get; set; } Property Value bool Capacity Gets or sets the maximum number of points displayed at any one moment in the graph. public int Capacity { get; set; } Property Value int Span Gets or sets the maximum span of data displayed at any one moment in the graph. public double Span { get; set; } Property Value double XMax Gets or sets the upper limit of the X-axis range when using a fixed scale. public double XMax { get; set; } Property Value double XMin Gets or sets the lower limit of the X-axis range when using a fixed scale. public double XMin { get; set; } Property Value double YMax Gets or sets the upper limit of the Y-axis range when using a fixed scale. public double YMax { get; set; } Property Value double YMin Gets or sets the lower limit of the Y-axis range when using a fixed scale. public double YMin { get; set; } Property Value double Methods CreateControl(IServiceProvider, GraphPanelBuilder) Creates and configures the mashup control associated with the specified workflow operator. protected override GraphControl CreateControl(IServiceProvider provider, GraphPanelBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder GraphPanelBuilder The ExpressionBuilder object used to provide configuration properties to the mashup control. Returns GraphControl A new instance of the mashup control class associated with the specified workflow operator. LoadMashupSource(int, MashupSource, IServiceProvider) Loads type visualizer resources for an individual mashup source in the mashup visualizer. protected override void LoadMashupSource(int index, MashupSource mashupSource, IServiceProvider provider) Parameters index int The zero-based index of the mashup source. mashupSource MashupSource The mashup source for which to load visualizer resources. provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Gui.ZedGraph.LineGraphBuilder.html": {
    "href": "api/Bonsai.Gui.ZedGraph.LineGraphBuilder.html",
    "title": "Class LineGraphBuilder | Bonsai.Gui",
    "keywords": "Class LineGraphBuilder Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Represents an operator that configures a visualizer to plot each element of the sequence as a line graph. [TypeVisualizer(typeof(LineGraphVisualizer))] public class LineGraphBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder LineGraphBuilder Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Capacity Gets or sets the optional capacity used for rolling line graphs. If no capacity is specified, all data points will be displayed. public int? Capacity { get; set; } Property Value int? CurveSettings Gets the optional settings for each line added to the graph. public Collection<CurveConfiguration> CurveSettings { get; } Property Value Collection<CurveConfiguration> IndexSelector Gets or sets the name of the property that will be used as index for the graph. public string IndexSelector { get; set; } Property Value string LineWidth Gets or sets the width, in points, to be used for the line graph. Use a value of zero to hide the line. public float LineWidth { get; set; } Property Value float SymbolType Gets or sets the optional symbol type to use for the line graph. public SymbolType SymbolType { get; set; } Property Value SymbolType ValueSelector Gets or sets the names of the properties to be displayed in the graph. Each selected property must have a point pair compatible type. public string ValueSelector { get; set; } Property Value string XMax Gets or sets a value specifying a fixed upper limit for the X-axis range. If no fixed range is specified, the graph limits can be edited online. public double? XMax { get; set; } Property Value double? XMin Gets or sets a value specifying a fixed lower limit for the X-axis range. If no fixed range is specified, the graph limits can be edited online. public double? XMin { get; set; } Property Value double? YMax Gets or sets a value specifying a fixed upper limit for the Y-axis range. If no fixed range is specified, the graph limits can be edited online. public double? YMax { get; set; } Property Value double? YMin Gets or sets a value specifying a fixed lower limit for the Y-axis range. If no fixed range is specified, the graph limits can be edited online. public double? YMin { get; set; } Property Value double? Methods Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the line graph visualizer on the specified input argument. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Bonsai.Gui.ZedGraph.LineGraphOverlay.html": {
    "href": "api/Bonsai.Gui.ZedGraph.LineGraphOverlay.html",
    "title": "Class LineGraphOverlay | Bonsai.Gui",
    "keywords": "Class LineGraphOverlay Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Provides a type visualizer used to overlay a sequence of points as a line graph. public class LineGraphOverlay : BufferedVisualizer Inheritance object DialogTypeVisualizer BufferedVisualizer LineGraphOverlay Inherited Members BufferedVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) BufferedVisualizer.TargetInterval DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(DateTime, object) Updates the type visualizer to display a buffered value object received at the specified time. protected override void Show(DateTime time, object value) Parameters time DateTime The time at which the value was received. value object The value to visualize. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) Updates the type visualizer with a new buffer of timestamped values. protected override void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> A buffer of timestamped values where each timestamp indicates the time at which the value was received. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Gui.ZedGraph.LineGraphVisualizer.html": {
    "href": "api/Bonsai.Gui.ZedGraph.LineGraphVisualizer.html",
    "title": "Class LineGraphVisualizer | Bonsai.Gui",
    "keywords": "Class LineGraphVisualizer Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Provides a type visualizer to display an object as a line graph. public class LineGraphVisualizer : BufferedVisualizer Inheritance object DialogTypeVisualizer BufferedVisualizer LineGraphVisualizer Inherited Members BufferedVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) BufferedVisualizer.TargetInterval object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AutoScaleX Gets or sets a value indicating whether the X-axis range should be recalculated automatically as the graph updates. public bool AutoScaleX { get; set; } Property Value bool AutoScaleY Gets or sets a value indicating whether the Y-axis range should be recalculated automatically as the graph updates. public bool AutoScaleY { get; set; } Property Value bool Capacity Gets or sets the maximum number of points displayed at any one moment in the graph. public int Capacity { get; set; } Property Value int XMax Gets or sets the upper limit of the X-axis range when using a fixed scale. public double XMax { get; set; } Property Value double XMin Gets or sets the lower limit of the X-axis range when using a fixed scale. public double XMin { get; set; } Property Value double YMax Gets or sets the upper limit of the Y-axis range when using a fixed scale. public double YMax { get; set; } Property Value double YMin Gets or sets the lower limit of the Y-axis range when using a fixed scale. public double YMin { get; set; } Property Value double Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. SequenceCompleted() Updates the type visualizer when one of the active subscriptions gracefully terminates. public override void SequenceCompleted() Show(DateTime, object) Updates the type visualizer to display a buffered value object received at the specified time. protected override void Show(DateTime time, object value) Parameters time DateTime The time at which the value was received. value object The value to visualize. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) Updates the type visualizer with a new buffer of timestamped values. protected override void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> A buffer of timestamped values where each timestamp indicates the time at which the value was received. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Gui.ZedGraph.RollingGraphBuilder.html": {
    "href": "api/Bonsai.Gui.ZedGraph.RollingGraphBuilder.html",
    "title": "Class RollingGraphBuilder | Bonsai.Gui",
    "keywords": "Class RollingGraphBuilder Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Represents an operator that configures a visualizer to plot each element of the sequence as a rolling graph. [TypeVisualizer(typeof(RollingGraphVisualizer))] public class RollingGraphBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder RollingGraphBuilder Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Capacity Gets or sets the optional capacity used for rolling line graphs. If no capacity is specified, all data points will be displayed. public int? Capacity { get; set; } Property Value int? CurveSettings Gets the optional settings for each line added to the graph. public Collection<CurveConfiguration> CurveSettings { get; } Property Value Collection<CurveConfiguration> IndexSelector Gets or sets the name of the property that will be used as index for the graph. public string IndexSelector { get; set; } Property Value string LineWidth Gets or sets the width, in points, to be used for the line graph. Use a value of zero to hide the line. public float LineWidth { get; set; } Property Value float Max Gets or sets a value specifying a fixed upper limit for the value axis. If no fixed range is specified, the graph limits can be edited online. public double? Max { get; set; } Property Value double? Min Gets or sets a value specifying a fixed lower limit for the value axis. If no fixed range is specified, the graph limits can be edited online. public double? Min { get; set; } Property Value double? SymbolType Gets or sets the optional symbol type to use for the line graph. public SymbolType SymbolType { get; set; } Property Value SymbolType ValueSelector Gets or sets the names of the properties that will be displayed in the graph. public string ValueSelector { get; set; } Property Value string Methods Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the line graph visualizer on the specified input argument. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Bonsai.Gui.ZedGraph.RollingGraphOverlay.html": {
    "href": "api/Bonsai.Gui.ZedGraph.RollingGraphOverlay.html",
    "title": "Class RollingGraphOverlay | Bonsai.Gui",
    "keywords": "Class RollingGraphOverlay Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Provides a type visualizer used to overlay a sequence of values as a rolling graph. public class RollingGraphOverlay : BufferedVisualizer Inheritance object DialogTypeVisualizer BufferedVisualizer RollingGraphOverlay Inherited Members BufferedVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) BufferedVisualizer.TargetInterval DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(DateTime, object) Updates the type visualizer to display a buffered value object received at the specified time. protected override void Show(DateTime time, object value) Parameters time DateTime The time at which the value was received. value object The value to visualize. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) Updates the type visualizer with a new buffer of timestamped values. protected override void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> A buffer of timestamped values where each timestamp indicates the time at which the value was received. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Gui.ZedGraph.RollingGraphPanelBuilder.html": {
    "href": "api/Bonsai.Gui.ZedGraph.RollingGraphPanelBuilder.html",
    "title": "Class RollingGraphPanelBuilder | Bonsai.Gui",
    "keywords": "Class RollingGraphPanelBuilder Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Represents an operator that specifies a mashup graph panel that can be used to combine multiple graphs displaying data over a shared axis. [TypeVisualizer(typeof(RollingGraphPanelVisualizer))] public class RollingGraphPanelBuilder : GraphPanelBuilderBase, IExpressionBuilder, INamedElement Inheritance object ExpressionBuilder ZeroArgumentExpressionBuilder GraphPanelBuilderBase RollingGraphPanelBuilder Implements IExpressionBuilder INamedElement Inherited Members GraphPanelBuilderBase.Name GraphPanelBuilderBase.ReverseX GraphPanelBuilderBase.ReverseY GraphPanelBuilderBase.Span GraphPanelBuilderBase.Capacity ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties BarType Gets or sets a value specifying how the different bars in the graph will be visually arranged. public BarType BarType { get; set; } Property Value BarType BaseAxis Gets or sets a value specifying the axis on which the bars in the graph will be displayed. [TypeConverter(typeof(BaseAxisConverter))] public BarBase BaseAxis { get; set; } Property Value BarBase Max Gets or sets a value specifying a fixed upper limit for the axis range. If no fixed range is specified, the graph limits can be edited online. public double? Max { get; set; } Property Value double? Min Gets or sets a value specifying a fixed lower limit for the axis range. If no fixed range is specified, the graph limits can be edited online. public double? Min { get; set; } Property Value double? Methods Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the graph panel visualizer. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Bonsai.Gui.ZedGraph.RollingGraphPanelVisualizer.html": {
    "href": "api/Bonsai.Gui.ZedGraph.RollingGraphPanelVisualizer.html",
    "title": "Class RollingGraphPanelVisualizer | Bonsai.Gui",
    "keywords": "Class RollingGraphPanelVisualizer Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Provides a type visualizer that can be used to overlay multiple plots sharing the same index axis in a single graph panel. public class RollingGraphPanelVisualizer : MashupControlVisualizerBase<GraphControl, RollingGraphPanelBuilder> Inheritance object DialogTypeVisualizer MashupVisualizer MashupControlVisualizerBase<GraphControl, RollingGraphPanelBuilder> RollingGraphPanelVisualizer Inherited Members MashupControlVisualizerBase<GraphControl, RollingGraphPanelBuilder>.Control MashupControlVisualizerBase<GraphControl, RollingGraphPanelBuilder>.CreateControl(IServiceProvider, RollingGraphPanelBuilder) MashupControlVisualizerBase<GraphControl, RollingGraphPanelBuilder>.Load(IServiceProvider) MashupControlVisualizerBase<GraphControl, RollingGraphPanelBuilder>.LoadMashups(IServiceProvider) MashupControlVisualizerBase<GraphControl, RollingGraphPanelBuilder>.LoadMashupSource(int, MashupSource, IServiceProvider) MashupControlVisualizerBase<GraphControl, RollingGraphPanelBuilder>.Show(object) MashupControlVisualizerBase<GraphControl, RollingGraphPanelBuilder>.Visualize(IObservable<IObservable<object>>, IServiceProvider) MashupControlVisualizerBase<GraphControl, RollingGraphPanelBuilder>.Unload() MashupVisualizer.Load(IServiceProvider) MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.Show(object) DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AutoScale Gets or sets a value indicating whether the axis range should be recalculated automatically as the graph updates. public bool AutoScale { get; set; } Property Value bool Capacity Gets or sets the maximum number of points displayed at any one moment in the graph. public int Capacity { get; set; } Property Value int Max Gets or sets the upper limit of the axis range when using a fixed scale. public double Max { get; set; } Property Value double Min Gets or sets the lower limit of the axis range when using a fixed scale. public double Min { get; set; } Property Value double Span Gets or sets the maximum span of data displayed at any one moment in the graph. public double Span { get; set; } Property Value double Methods CreateControl(IServiceProvider, RollingGraphPanelBuilder) Creates and configures the mashup control associated with the specified workflow operator. protected override GraphControl CreateControl(IServiceProvider provider, RollingGraphPanelBuilder builder) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. builder RollingGraphPanelBuilder The ExpressionBuilder object used to provide configuration properties to the mashup control. Returns GraphControl A new instance of the mashup control class associated with the specified workflow operator. LoadMashupSource(int, MashupSource, IServiceProvider) Loads type visualizer resources for an individual mashup source in the mashup visualizer. protected override void LoadMashupSource(int index, MashupSource mashupSource, IServiceProvider provider) Parameters index int The zero-based index of the mashup source. mashupSource MashupSource The mashup source for which to load visualizer resources. provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Gui.ZedGraph.RollingGraphVisualizer.html": {
    "href": "api/Bonsai.Gui.ZedGraph.RollingGraphVisualizer.html",
    "title": "Class RollingGraphVisualizer | Bonsai.Gui",
    "keywords": "Class RollingGraphVisualizer Namespace Bonsai.Gui.ZedGraph Assembly Bonsai.Gui.ZedGraph.dll Provides a type visualizer to display an object as a rolling graph. public class RollingGraphVisualizer : BufferedVisualizer Inheritance object DialogTypeVisualizer BufferedVisualizer RollingGraphVisualizer Inherited Members BufferedVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) BufferedVisualizer.TargetInterval object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AutoScale Gets or sets a value indicating whether the value axis scale should be recalculated automatically as the graph updates. public bool AutoScale { get; set; } Property Value bool Capacity Gets or sets the maximum number of time points displayed at any one moment in the graph. public int Capacity { get; set; } Property Value int Max Gets or sets the upper limit for the value axis when using a fixed scale. public double Max { get; set; } Property Value double Min Gets or sets the lower limit for the value axis when using a fixed scale. public double Min { get; set; } Property Value double Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. SequenceCompleted() Updates the type visualizer when one of the active subscriptions gracefully terminates. public override void SequenceCompleted() Show(DateTime, object) Updates the type visualizer to display a buffered value object received at the specified time. protected override void Show(DateTime time, object value) Parameters time DateTime The time at which the value was received. value object The value to visualize. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) Updates the type visualizer with a new buffer of timestamped values. protected override void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> A buffer of timestamped values where each timestamp indicates the time at which the value was received. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.Gui.ZedGraph.html": {
    "href": "api/Bonsai.Gui.ZedGraph.html",
    "title": "Namespace Bonsai.Gui.ZedGraph | Bonsai.Gui",
    "keywords": "Namespace Bonsai.Gui.ZedGraph Classes BarGraphBuilder Represents an operator that configures a visualizer to plot each element of the sequence as a bar graph. BarGraphOverlay Provides a type visualizer used to overlay a sequence of values as a bar graph. BarGraphVisualizer Provides a type visualizer to display an object as a bar graph. CurveConfiguration Represents common configuration properties for individual curves in a graph. GraphControl Provides a dynamic graph control with a built-in color cycle palette. GraphPanelBuilder Represents an operator that specifies a mashup graph panel that can be used to combine multiple plots sharing the same axes. GraphPanelBuilderBase Provides an abstract base class with common mashup graph panel functionality. GraphPanelVisualizer Provides a type visualizer that can be used to overlay multiple plots sharing the same axes in a single graph panel. LineGraphBuilder Represents an operator that configures a visualizer to plot each element of the sequence as a line graph. LineGraphOverlay Provides a type visualizer used to overlay a sequence of points as a line graph. LineGraphVisualizer Provides a type visualizer to display an object as a line graph. RollingGraphBuilder Represents an operator that configures a visualizer to plot each element of the sequence as a rolling graph. RollingGraphOverlay Provides a type visualizer used to overlay a sequence of values as a rolling graph. RollingGraphPanelBuilder Represents an operator that specifies a mashup graph panel that can be used to combine multiple graphs displaying data over a shared axis. RollingGraphPanelVisualizer Provides a type visualizer that can be used to overlay multiple plots sharing the same index axis in a single graph panel. RollingGraphVisualizer Provides a type visualizer to display an object as a rolling graph."
  },
  "api/Bonsai.Gui.html": {
    "href": "api/Bonsai.Gui.html",
    "title": "Namespace Bonsai.Gui | Bonsai.Gui",
    "keywords": "Namespace Bonsai.Gui Classes ButtonBuilder Represents an operator that interfaces with a button control and generates a sequence of notifications whenever the button is clicked. ButtonBuilderBase<TEvent> Provides an abstract base class with common button control functionality. ButtonVisualizer Provides a type visualizer representing a button control. CheckBoxBuilder Represents an operator that interfaces with a check box control and generates a sequence of notifications whenever the checked status changes. CheckBoxVisualizer Provides a type visualizer representing a check box control. CheckButtonBuilderBase Provides an abstract base class with common check button control functionality. ComboBoxBuilder Represents an operator that interfaces with a combo box control and generates a sequence of notifications whenever the selection changes. ComboBoxDataSourceBuilder Represents an operator that interfaces with a combo box control bound to each data source in the sequence and generates notifications whenever the selection changes. ComboBoxDataSourceVisualizer Provides a type visualizer representing a combo box control bound to an arbitrary data source. ComboBoxVisualizer Provides a type visualizer representing a combo box control. ContainerControlVisualizerBase<TControl, TControlBuilder> Provides an abstract base class for visualizers representing UI elements which can contain other nested UI elements. ControlBuilderBase Provides an abstract base class for common UI control functionality. ControlBuilderBase<TEvent> Provides an abstract base class with common UI event source control functionality. ControlBuilderBase<TCommand, TEvent> Provides an abstract base class with common functionality for UI controls that accept an optional sequence of command notifications. ControlExtensions Provides a set of static methods for subscribing delegates to observable sequences of event notifications. ControlVisualizerBase<TControl, TControlBuilder> Provides an abstract base class for visualizers representing individual UI elements. DataSourceControlBuilderBase Provides an abstract base class for UI controls which can be bound to each data source from an observable sequence. GroupBoxBuilder Represents an operator that specifies a mashup visualizer that displays a frame around a group of other visualizers with an optional caption. GroupBoxVisualizer Provides a type visualizer that displays a frame around a group of other visualizers with an optional caption. LabelBuilder Represents an operator that interfaces with a label control. LabelVisualizer Provides a type visualizer representing a label control. ListBoxBuilder Represents an operator that interfaces with a list box control and generates a sequence of notifications whenever the selection changes. ListBoxDataSourceBuilder Represents an operator that interfaces with a list box control bound to each data source in the sequence and generates notifications whenever the selection changes. ListBoxDataSourceVisualizer Provides a type visualizer representing a list box control bound to an arbitrary data source. ListBoxVisualizer Provides a type visualizer representing a list box control. ListControlBuilderBase Provides an abstract base class for interfacing with combo box and list box controls. ListControlDataSourceBuilderBase Provides an abstract base class for interfacing with combo box and list box controls bound to each data source in an observable sequence. MashupControlVisualizerBase<TControl, TControlBuilder> Provides an abstract base class for visualizers representing UI elements which can be combined with other visualizers. PropertyGridBuilder Represents an operator that interfaces with a property grid control for browsing the properties of the workflow in which it is inserted. PropertyGridVisualizer Provides a type visualizer representing a property grid control. RadioButtonBuilder Represents an operator that interfaces with a radio button control and generates a sequence of notifications whenever the checked status changes. RadioButtonVisualizer Provides a type visualizer representing a radio button control. SliderBuilder Represents an operator that interfaces with a slider control and generates a sequence of notifications whenever the slider value changes. SliderVisualizer Provides a type visualizer representing a slider control. TabControlBuilder Represents an operator that specifies a mashup visualizer that can be used to arrange other visualizers using a related set of tab pages. TabControlVisualizer Provides a type visualizer that can be used to arrange other visualizers using a related set of tab pages. TableLayoutPanelBuilder Represents an operator that specifies a mashup visualizer panel that can be used to arrange other visualizers in a grid. TableLayoutPanelCellSpan Represents the vertical and horizontal span of a table layout cell. TableLayoutPanelVisualizer Provides a type visualizer that can be used to arrange other visualizers in a grid. TextBoxBuilder Represents an operator that interfaces with a text box control and generates a sequence of notifications whenever the text changes. TextBoxVisualizer Provides a type visualizer representing a text box control. TextControlBuilderBase Provides an abstract base class for common UI text control functionality. TextControlBuilderBase<TEvent> Provides an abstract base class with common UI text and event source control functionality. ToggleButtonBuilder Represents an operator that interfaces with a toggle button control and generates a sequence of notifications whenever the toggle status changes. ToggleButtonVisualizer Provides a type visualizer representing a toggle button control."
  },
  "index.html": {
    "href": "index.html",
    "title": "Getting Started | Bonsai.Gui",
    "keywords": "Getting Started Bonsai.Gui is a collection of packages for the Bonsai visual programming language for quickly composing user interfaces and real-time data visualization. To install Bonsai.Gui use the Bonsai package manager and search for the Bonsai - GUI package. Build user interfaces Bonsai.Gui includes a collection of several common user interface controls, including buttons, sliders, combo boxes, text boxes, etc. At runtime, each control operator exposes its own visualizer displaying only that specific control. To combine multiple controls together, we use container controls, such as group boxes, tab controls, or table layout panels. To add controls into the container, we use the VisualizerMapping operator to hierarchically overlay the controls. Compose real-time visualizations Bonsai.Gui.ZedGraph provides a framework for assembling complex real-time reactive plots using bar graphs, line graphs or rolling graphs. Similar to GUI elements, each of these graphs exposes a visualizer, where updates are synchronized and driven by data arriving from the input sequence. Multiple traces or bars can be plotted in the same graph if the input values are complex data types. Multiple independent graph visualizers can also be combined and updated asynchronously using graph panels. Similar to GUI elements, we can add graphs into a graph panel by using the VisualizerMapping operator. This can be used for example to create visualizations where part of the plot is made up of continuous periodic traces, and other parts are overlaid dynamically using sparse or infrequent updates from other data sequences. Example The following example builds a simple GUI with a slider and a button, where values of the slider are plotted continuously on a graph. A red dot is overlaid marking the current value of the slider every time the button is clicked."
  }
}